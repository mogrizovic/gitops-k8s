apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: kaniko-build-image
spec:
  entrypoint: kaniko-build-loop
  templates:
  - name: kaniko-build-loop
    serviceAccountName: argo-workflow
    inputs:
      parameters:
      - name: image_name
      - name: image_variant
      - name: branch_name
      - name: repo
      - name: commit_message
    steps:
      - - name: calculate-version
          template: calculate-image-tag
          arguments:
            parameters:
            - name: commit_message
              value: "{{inputs.parameters.commit_message}}"
            - name: image_name
              value: "{{inputs.parameters.image_name}}"
            - name: image_variant
              value: "{{inputs.parameters.image_variant}}"

        # - name: calculate-prerelease
        #   template: calculate-image-prerelease
        #   arguments:
        #     parameters:
        #     - name: image_variant
        #       value: "{{inputs.parameters.image_variant}}"

      - - name: kaniko-build
          template: kaniko-build
          arguments:
            parameters:
            - name: image_name
              value: "{{inputs.parameters.image_name}}"
            - name: image_tag
              value: "{{steps.calculate-version.outputs.parameters.next_tag}}"
            - name: prerelease
              value: "{{steps.calculate-prerelease.outputs.parameters.prerelease}}"
            - name: repo
              value: "{{inputs.parameters.repo}}"
            - name: arch
              value: "{{item}}"
            - name: branch_name
              value: "{{inputs.parameters.branch_name}}"
          withItems:
            - arm64
            - amd64

      - - name: manifest-tool
          template: manifest-tool
          arguments:
            parameters:
            - name: image_name
              value: "{{inputs.parameters.image_name}}"
            - name: image_tag
              value: "{{steps.calculate-version.outputs.parameters.next_tag}}"
            - name: prerelease
              value: "{{steps.calculate-prerelease.outputs.parameters.prerelease}}"
            - name: platforms
              value: "linux/amd64,linux/arm64"
            - name: repo
              value: "{{inputs.parameters.repo}}"

  # - name: calculate-image-prerelease
  #   inputs:
  #     parameters:
  #       - name: image_variant
  #   outputs:
  #     parameters:
  #       - name: prerelease
  #         valueFrom:
  #           path: /tmp/prerelease.txt
  #   serviceAccountName: argo-workflow
  #   script:
  #     image: ogrizovicm/alpine-curl-jq:1.0.0
  #     command: [sh]
  #     source: |
  #       variant={{inputs.parameters.image_variant}}
  #       if [ {{inputs.parameters.image_variant}} != "" ]; then
  #         variant="-${variant}"
  #       fi
  #       echo $variant > /tmp/prerelease.txt

  - name: kaniko-build
    inputs:
      parameters:
      - name: image_name
      - name: image_tag
      - name: prerelease
      - name: arch
      - name: repo
      - name: branch_name
    volumes:
      - name: kaniko-secret
        secret:
          secretName: dockercred
          items:
            - key: .dockerconfigjson
              path: config.json
    nodeSelector:
      kubernetes.io/arch: "{{inputs.parameters.arch}}"
    serviceAccountName: argo-workflow
    container:
      image: gcr.io/kaniko-project/executor:latest
      args:
      - "--context=git://github.com/{{inputs.parameters.repo}}.git#refs/heads/{{inputs.parameters.branch_name}}"
      - '--destination={{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}}{{inputs.parameters.prerelease}}-{{inputs.parameters.arch}}'
      volumeMounts:
      - name: kaniko-secret
        mountPath: /kaniko/.docker

  - name: manifest-tool
    inputs:
      parameters:
      - name: image_name
      - name: image_tag
      - name: prerelease
      - name: platforms
    serviceAccountName: argo-workflow
    container:
      image: mplatform/manifest-tool:alpine
      command: ["/bin/sh", "-c"]
      args:
        - >
          manifest-tool --username=$USERNAME --password=$PASSWORD push
          from-args --platforms {{inputs.parameters.platforms}}
          --template {{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}}{{inputs.parameters.prerelease}}-ARCH
          --target {{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}}{{inputs.parameters.prerelease}}
      env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: dockerhub-auth
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: dockerhub-auth
              key: password

  - name: calculate-image-tag
    inputs:
      parameters:
        - name: image_name      # e.g. ogrizovicm/spring-boot-example
        - name: commit_message  # e.g. "MINOR: Add new endpoint"
        - name: image_variant
    outputs:
      parameters:
        - name: next_tag
          valueFrom:
            path: /tmp/next_tag.txt
          globalName: image_next_tag
        - name: prerelease
          valueFrom:
            path: /tmp/prerelease.txt
          globalName: image_prerelease
    serviceAccountName: argo-workflow
    script:
      image: ogrizovicm/alpine-curl-jq:1.0.0
      command: [sh]
      source: |
        set -e

        REPO="{{inputs.parameters.image_name}}"

        USER=$(echo "$REPO" | cut -d/ -f1)
        IMAGE=$(echo "$REPO" | cut -d/ -f2)

        TAGS=$(curl -s "https://hub.docker.com/v2/repositories/$USER/$IMAGE/tags?page_size=10" | jq -r '.results[].name' || echo "")

        # Fallback to 0.0.1 if no tags found
        if [ -z "$TAGS" ]; then
          echo "0.0.1" > /tmp/next_tag.txt
          exit 0
        fi

        # Filter only semver-valid tags and strip 'v' prefix if present
        LATEST=$(echo "$TAGS" | grep -E '(^v?[0-9]+\.[0-9]+\.[0-9]+)(-.*)?$' | sed 's/^v//' | sort -V | tail -n 1 | sed 's/\([0-9]*\.[0-9]*\.[0-9]*\)\(.*\)/\1/')

        MAJOR=$(echo "$LATEST" | cut -d. -f1)
        MINOR=$(echo "$LATEST" | cut -d. -f2)
        PATCH=$(echo "$LATEST" | cut -d. -f3)

        COMMIT_MSG=$(echo "{{inputs.parameters.commit_message}}" | tr '[:lower:]' '[:upper:]')

        # Default bump is NO
        BUMP="no"

        # Check commit message prefix
        case "$COMMIT_MSG" in
          MAJOR:*)
            BUMP="major"
            ;;
          MINOR:*)
            BUMP="minor"
            ;;
          PATCH:*)
            BUMP="patch"
            ;;
          *)
            BUMP="no"
            ;;
        esac

        # Bump version accordingly
        case "$BUMP" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac

        # Construct next tag
        if [ {{inputs.parameters.prerelease}} != "" ]; then
          NEXT_TAG="$MAJOR.$MINOR.$PATCH-{{inputs.parameters.prerelease}}"
        else
          NEXT_TAG="$MAJOR.$MINOR.$PATCH"
        fi
        echo "Bump type: $BUMP -> Next tag: $NEXT_TAG"

        # Output to file so it can be passed to next step
        echo -n "$NEXT_TAG" > /tmp/next_tag.txt

        # Calculate prerelease
        variant={{inputs.parameters.image_variant}}
        if [ {{inputs.parameters.image_variant}} != "" ]; then
          variant="-${variant}"
        fi
        echo $variant > /tmp/prerelease.txt

        exit 0
